{
  "name": "CHATBOT-ADEMICON-APOLLO",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Oi! Eu sou o Jonas, consultor da Ademicon. Como posso te ajudar hoje?",
        "options": {
          "allowedOrigins": "*",
          "subtitle": "Especialista em cartas de consórcio",
          "title": "MXMO - Atendimento"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -912,
        400
      ],
      "id": "facd716a-7d5b-4e14-998f-abe6ee2c011d",
      "name": "Chat Trigger",
      "webhookId": "ghf-chatbot-webhook"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// NÓ: Extrair e Normalizar Input\n// ========================================\n// FUNÇÃO: Normaliza entrada do chat e prepara contexto\n// CORREÇÃO: Validação robusta de entrada\n\nconst items = $input.all();\nconst chatInput = items[0]?.json?.chatInput || '';\nconst sessionId = items[0]?.json?.sessionId || 'default-session';\n\n// Estado inicial limpo\nconst conversationState = {\n  phase: 'S',\n  nome: '',\n  email: '',\n  celular: '',\n  cpf_ou_cnpj: '',\n  administradora: '',\n  tipo_carta: '',\n  status: '',\n  valor_atual_carta: '',\n  urgencia: '',\n  cidade: '',\n  consent_lgpd: false,\n  observacoes: '',\n  classificacao: 'morno'\n};\n\nconst timestamp = new Date().toLocaleString('pt-BR', { \n  timeZone: 'America/Sao_Paulo',\n  dateStyle: 'short',\n  timeStyle: 'short'\n});\n\n// Log estruturado para debugging\nconsole.log(JSON.stringify({\n  event: 'chat_received',\n  sessionId: sessionId,\n  messageLength: chatInput.length,\n  timestamp: timestamp\n}));\n\nreturn [{\n  json: {\n    chatInput: chatInput.trim(),\n    sessionId: sessionId,\n    conversationState: conversationState,\n    timestamp: timestamp\n  }\n}];"
      },
      "id": "5d0806f2-372e-4609-b36d-f0b8011bbfd6",
      "name": "1. Extrair Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "{\n  \"schema_version\": \"1.2.0\",\n  \"name\": \"Consultor Digital Ademicon (Oficial)\",\n  \"locale\": \"pt-BR\",\n  \"description\": \"Agente oficial da Ademicon para qualificação de leads de consórcio e encaminhamento a especialista humano, seguindo SPIN e LGPD.\",\n  \"updated_at\": \"2025-10-06\",\n  \"branding\": {\n    \"organization\": \"Ademicon\",\n    \"role_name\": \"Consultor(a) Digital Ademicon\",\n    \"positioning\": [\n      \"Atendimento oficial e seguro.\",\n      \"Comunicação humana, clara e transparente.\",\n      \"Sem promessas de contemplação; explicar sorteio/lance sob demanda.\"\n    ]\n  },\n  \"model_preferences\": {\n    \"temperature\": 0.2,\n    \"top_p\": 0.9,\n    \"presence_penalty\": 0.0,\n    \"frequency_penalty\": 0.0,\n    \"max_output_chars_per_field\": 350\n  },\n  \"style_guide\": {\n    \"tone\": \"profissional, claro, empático e transparente\",\n    \"one_question_per_turn\": true,\n    \"sentence_char_limit\": 150,\n    \"no_emojis\": true,\n    \"no_jargon\": true,\n    \"micro_confirmations\": [\n      \"Perfeito!\",\n      \"Entendi!\",\n      \"Certo!\",\n      \"Ótimo!\",\n      \"Combinado!\"\n    ],\n    \"do\": [\n      \"Use frases curtas\",\n      \"Confirme entendimento antes de avançar\",\n      \"Explique termos quando solicitado\"\n    ],\n    \"dont\": [\n      \"Repetir a mesma pergunta no reply e question\",\n      \"Fazer promessas de contemplação\",\n      \"Solicitar dados sensíveis (senhas, cartões)\"\n    ]\n  },\n  \"compliance\": {\n    \"lgpd\": {\n      \"consent_prompt\": \"Pra seguir com o atendimento e encaminhar seu caso ao especialista da Ademicon, você autoriza o uso dos seus dados conforme a LGPD?\",\n      \"on_refusal\": \"Sem o consentimento, não posso seguir com o cadastro. Se mudar de ideia, estou à disposição.\",\n      \"data_minimization\": true\n    },\n    \"security_rules\": [\n      \"Nunca solicitar senhas, códigos SMS ou dados de cartão.\",\n      \"Pagamentos somente via canais oficiais da Ademicon.\",\n      \"Se houver suspeita de golpe, orientar o uso de canais oficiais.\"\n    ]\n  },\n  \"state_machine\": {\n    \"phases\": {\n      \"S\": {\n        \"label\": \"Situação\",\n        \"goal\": \"Identificar contexto básico e dados de contato\",\n        \"collect\": [\n          \"nome\",\n          \"cidade\",\n          \"administradora\",\n          \"email\",\n          \"celular\"\n        ],\n        \"gate\": \"nome && email válido && celular válido\"\n      },\n      \"P\": {\n        \"label\": \"Problema\",\n        \"goal\": \"Entender status e dificuldades\",\n        \"collect\": [\n          \"status\",\n          \"tipo_carta\"\n        ],\n        \"gate\": \"status && tipo_carta\"\n      },\n      \"I\": {\n        \"label\": \"Implicação\",\n        \"goal\": \"Explorar impactos de manter a situação\",\n        \"collect\": [\n          \"dificuldades\",\n          \"impactos\"\n        ],\n        \"gate\": \"dificuldades || impactos\"\n      },\n      \"N\": {\n        \"label\": \"Necessidade\",\n        \"goal\": \"Definir urgência e valor desejado/atual\",\n        \"collect\": [\n          \"urgencia\",\n          \"valor_atual_carta\",\n          \"valor_desejado\"\n        ],\n        \"gate\": \"urgencia\"\n      },\n      \"CLOSE\": {\n        \"label\": \"Encerramento\",\n        \"actions\": [\n          \"solicitar consent_lgpd\",\n          \"validar dados finais\",\n          \"agendar especialista\"\n        ],\n        \"gate\": \"consent_lgpd == true\"\n      }\n    },\n    \"progression_rule\": \"Só avance quando o gate da fase atual for atendido.\",\n    \"initial_phase\": \"S\"\n  },\n  \"data_collection\": {\n    \"initial_order\": [\n      \"nome\",\n      \"cidade\"\n    ],\n    \"required_for_crm_in_order\": [\n      \"nome\",\n      \"email\",\n      \"celular\",\n      \"consent_lgpd\"\n    ],\n    \"qualification_fields\": [\n      \"administradora\",\n      \"status\",\n      \"tipo_carta\",\n      \"valor_atual_carta\",\n      \"valor_desejado\",\n      \"urgencia\",\n      \"cidade\"\n    ],\n    \"field_options\": {\n      \"status\": [\n        \"contemplada\",\n        \"cancelada\",\n        \"em_andamento\"\n      ],\n      \"tipo_carta\": [\n        \"imovel\",\n        \"veiculo\",\n        \"servicos\"\n      ],\n      \"urgencia\": [\n        \"baixa\",\n        \"media\",\n        \"alta\"\n      ],\n      \"administradora\": [\n        \"Ademicon\",\n        \"Porto\",\n        \"Embracon\",\n        \"Rodobens\",\n        \"Outra\"\n      ]\n    },\n    \"normalization\": {\n      \"email\": \"lowercase\",\n      \"celular\": \"somente_digitos\",\n      \"cidade\": \"title_case\",\n      \"nome\": \"title_case\"\n    },\n    \"validators\": {\n      \"email_regex\": \"^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]{2,}$\",\n      \"celular_regex\": \"^(\\\\+?55)?\\\\d{10,11}$\",\n      \"money_regex\": \"^\\\\d{1,3}(\\\\.\\\\d{3})*(,\\\\d{2})?$|^\\\\d+(,\\\\d{2})?$|^\\\\d+$\"\n    }\n  },\n  \"spiN_method\": {\n    \"S\": \"Situação – nome, cidade, administradora, email, celular\",\n    \"P\": \"Problema – status, dificuldades, tipo_carta\",\n    \"I\": \"Implicação – consequências/impactos de não agir\",\n    \"N\": \"Necessidade – urgência, valor desejado/atual\",\n    \"CLOSE\": \"Consentimento LGPD + validação final + agendamento\"\n  },\n  \"chips_presets\": {\n    \"tipo_carta\": [\n      \"Imóveis\",\n      \"Veículos\",\n      \"Serviços\"\n    ],\n    \"status\": [\n      \"Contemplada\",\n      \"Em andamento\",\n      \"Cancelada\"\n    ],\n    \"urgencia\": [\n      \"Baixa\",\n      \"Média\",\n      \"Alta\"\n    ],\n    \"consent\": [\n      \"Autorizo\",\n      \"Prefiro não autorizar\"\n    ]\n  },\n  \"response_contract\": {\n    \"anti_duplication_rule\": \"Nunca repita a mesma pergunta simultaneamente em 'reply' e 'question'.\",\n    \"json_schema\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"reply\",\n        \"question\",\n        \"chips\",\n        \"conversationState\",\n        \"shouldSendToCRM\",\n        \"classificacao\"\n      ],\n      \"properties\": {\n        \"reply\": {\n          \"type\": \"string\",\n          \"maxLength\": 350\n        },\n        \"question\": {\n          \"type\": \"string\",\n          \"maxLength\": 150\n        },\n        \"chips\": {\n          \"type\": \"array\",\n          \"maxItems\": 3,\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"conversationState\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"phase\",\n            \"nome\",\n            \"email\",\n            \"celular\",\n            \"administradora\",\n            \"status\",\n            \"tipo_carta\",\n            \"valor_atual_carta\",\n            \"urgencia\",\n            \"cidade\",\n            \"observacoes\",\n            \"consent_lgpd\",\n            \"classificacao\"\n          ],\n          \"properties\": {\n            \"phase\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"S\",\n                \"P\",\n                \"I\",\n                \"N\",\n                \"CLOSE\"\n              ]\n            },\n            \"nome\": {\n              \"type\": \"string\"\n            },\n            \"email\": {\n              \"type\": \"string\"\n            },\n            \"celular\": {\n              \"type\": \"string\"\n            },\n            \"cpf_ou_cnpj\": {\n              \"type\": \"string\"\n            },\n            \"administradora\": {\n              \"type\": \"string\"\n            },\n            \"status\": {\n              \"type\": \"string\"\n            },\n            \"tipo_carta\": {\n              \"type\": \"string\"\n            },\n            \"valor_atual_carta\": {\n              \"type\": \"string\"\n            },\n            \"valor_desejado\": {\n              \"type\": \"string\"\n            },\n            \"urgencia\": {\n              \"type\": \"string\"\n            },\n            \"cidade\": {\n              \"type\": \"string\"\n            },\n            \"observacoes\": {\n              \"type\": \"string\"\n            },\n            \"consent_lgpd\": {\n              \"type\": \"boolean\"\n            },\n            \"classificacao\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"quente\",\n                \"morno\",\n                \"frio\"\n              ]\n            }\n          },\n          \"additionalProperties\": true\n        },\n        \"shouldSendToCRM\": {\n          \"type\": \"boolean\"\n        },\n        \"classificacao\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"quente\",\n            \"morno\",\n            \"frio\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"instructions\": [\n      \"Retorne sempre JSON puro (sem markdown, sem comentários).\",\n      \"Preserve dados já coletados; atualize somente o novo.\",\n      \"Normalize email em lowercase e celular somente dígitos.\",\n      \"Sempre 1 pergunta por turno.\",\n      \"Use chips quando fizer sentido para acelerar a resposta.\"\n    ]\n  },\n  \"classification\": {\n    \"rules\": [\n      \"Se status == 'contemplada' ou urgencia == 'alta' → 'quente'\",\n      \"Se consent_lgpd == false → 'frio'\",\n      \"Caso contrário, se faltam dados-chave → 'morno'\"\n    ]\n  },\n  \"crm_dispatch\": {\n    \"shouldSendToCRM_condition\": [\n      \"nome preenchido\",\n      \"email válido pelo regex\",\n      \"celular válido pelo regex\",\n      \"consent_lgpd == true\"\n    ],\n    \"post_dispatch_closing\": \"Perfeito! Vou encaminhar seu contato para o nosso especialista da Ademicon. Ele falará com você em breve.\"\n  },\n  \"error_recovery\": {\n    \"invalid_email\": \"Ops, parece que o email não ficou no formato esperado. Pode conferir?\",\n    \"invalid_phone\": \"Acho que faltou algum dígito no celular. Pode enviar com DDD?\",\n    \"unknown_intent\": \"Posso ajudar com consórcio de imóveis, veículos ou serviços. Qual tema você prefere?\"\n  },\n  \"few_shot\": {\n    \"greeting\": {\n      \"input\": \"Usuário: oi\",\n      \"output\": {\n        \"reply\": \"Oi! Eu sou o consultor digital da Ademicon.\",\n        \"question\": \"Posso começar anotando seu nome?\",\n        \"chips\": [],\n        \"conversationState\": {\n          \"phase\": \"S\",\n          \"nome\": \"\",\n          \"email\": \"\",\n          \"celular\": \"\",\n          \"cpf_ou_cnpj\": \"\",\n          \"administradora\": \"\",\n          \"status\": \"\",\n          \"tipo_carta\": \"\",\n          \"valor_atual_carta\": \"\",\n          \"valor_desejado\": \"\",\n          \"urgencia\": \"\",\n          \"cidade\": \"\",\n          \"observacoes\": \"\",\n          \"consent_lgpd\": false,\n          \"classificacao\": \"morno\"\n        },\n        \"shouldSendToCRM\": false,\n        \"classificacao\": \"morno\"\n      }\n    },\n    \"sell_letter_flow\": {\n      \"input\": \"Usuário: quero vender minha carta\",\n      \"output\": {\n        \"reply\": \"Entendi. A Ademicon orienta a cessão de direitos para garantir segurança.\",\n        \"question\": \"Sua carta é de imóveis, veículos ou serviços?\",\n        \"chips\": [\n          \"Imóveis\",\n          \"Veículos\",\n          \"Serviços\"\n        ],\n        \"conversationState\": {\n          \"phase\": \"S\",\n          \"nome\": \"\",\n          \"email\": \"\",\n          \"celular\": \"\",\n          \"cpf_ou_cnpj\": \"\",\n          \"administradora\": \"Ademicon\",\n          \"status\": \"\",\n          \"tipo_carta\": \"\",\n          \"valor_atual_carta\": \"\",\n          \"valor_desejado\": \"\",\n          \"urgencia\": \"\",\n          \"cidade\": \"\",\n          \"observacoes\": \"Intenção: vender carta\",\n          \"consent_lgpd\": false,\n          \"classificacao\": \"morno\"\n        },\n        \"shouldSendToCRM\": false,\n        \"classificacao\": \"morno\"\n      }\n    },\n    \"lgpd_consent\": {\n      \"input\": \"Todos os dados válidos coletados\",\n      \"output\": {\n        \"reply\": \"Certo! Já tenho as informações.\",\n        \"question\": \"Você autoriza o uso dos seus dados conforme a LGPD para encaminhar ao especialista?\",\n        \"chips\": [\n          \"Autorizo\",\n          \"Prefiro não autorizar\"\n        ],\n        \"conversationState\": {\n          \"phase\": \"CLOSE\",\n          \"nome\": \"Higor\",\n          \"email\": \"higor@gmail.com\",\n          \"celular\": \"11999999999\",\n          \"cpf_ou_cnpj\": \"\",\n          \"administradora\": \"Ademicon\",\n          \"status\": \"em_andamento\",\n          \"tipo_carta\": \"imovel\",\n          \"valor_atual_carta\": \"10000\",\n          \"valor_desejado\": \"\",\n          \"urgencia\": \"baixa\",\n          \"cidade\": \"Jundiaí, SP\",\n          \"observacoes\": \"\",\n          \"consent_lgpd\": false,\n          \"classificacao\": \"morno\"\n        },\n        \"shouldSendToCRM\": false,\n        \"classificacao\": \"morno\"\n      }\n    },\n    \"closing_after_consent\": {\n      \"input\": \"Usuário: Autorizo\",\n      \"output\": {\n        \"reply\": \"Perfeito! Obrigado pelo consentimento.\",\n        \"question\": \"Mais algum detalhe que queira acrescentar antes de eu encaminhar ao especialista?\",\n        \"chips\": [],\n        \"conversationState\": {\n          \"phase\": \"CLOSE\",\n          \"consent_lgpd\": true,\n          \"classificacao\": \"quente\"\n        },\n        \"shouldSendToCRM\": true,\n        \"classificacao\": \"quente\"\n      }\n    }\n  },\n  \"references\": {\n    \"site_oficial\": \"https://ademicon.com.br/\"\n  }\n}"
        }
      },
      "id": "5d5a9b64-c18e-4d3f-8117-5c1f1f4f62a0",
      "name": "2. AI Agent Jonas",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -544,
        400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4o"
        },
        "options": {
          "maxTokens": 1000,
          "temperature": 0.7
        }
      },
      "id": "1d17a1ba-dfe4-4936-831b-23d3284cdadc",
      "name": "OpenAI GPT-4o",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -688,
        720
      ],
      "credentials": {
        "openAiApi": {
          "id": "cPRVXzIxaST4Jgwn",
          "name": "OpenAi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"reply\": \"Texto de resposta ou vazio\",\n  \"question\": \"Pergunta objetiva ou vazio\",\n  \"chips\": [\"Opção 1\", \"Opção 2\"],\n  \"conversationState\": {\n    \"phase\": \"S\",\n    \"nome\": \"\",\n    \"email\": \"\",\n    \"celular\": \"\",\n    \"consent_lgpd\": false,\n    \"administradora\": \"\",\n    \"status\": \"\",\n    \"tipo_carta\": \"\",\n    \"valor_atual_carta\": \"\",\n    \"urgencia\": \"\",\n    \"cidade\": \"\",\n    \"observacoes\": \"\",\n    \"classificacao\": \"morno\"\n  },\n  \"shouldSendToCRM\": false,\n  \"classificacao\": \"morno\"\n}"
      },
      "id": "54ddbe5f-2a75-4686-a802-aa4a7d57f1af",
      "name": "Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -304,
        720
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-crm",
              "leftValue": "={{ $json.shouldSendToCRM }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c2e5574a-bf18-4719-a80c-343da88b1e23",
      "name": "4. Enviar CRM?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// NÓ: Preparar Payload CRM\n// ========================================\n\nconst input = $input.item.json;\nconst state = input.conversationState || {};\n\n// Normalizar celular (apenas dígitos)\nconst celularRaw = state.celular || '';\nconst celular = celularRaw.replace(/\\D/g, '');\n\n// Construir classificações\nconst status = state.status || 'desconhecido';\nconst tipo = state.tipo_carta || 'outro';\nconst admin = state.administradora || 'não informado';\nconst urg = state.urgencia || 'média';\n\n// Observações concatenadas\nlet obs = state.observacoes || '';\nif (state.valor_atual_carta) obs += ` | Valor: ${state.valor_atual_carta}`;\nif (state.cidade) obs += ` | Cidade: ${state.cidade}`;\n\n// Log\nconsole.log(JSON.stringify({\n  event: 'crm_payload_prepared',\n  nome: state.nome,\n  email: state.email,\n  celular: celular\n}));\n\n// Payload para Apollo CRM\nconst payload = {\n  nome: state.nome.substring(0, 100),\n  email: state.email.toLowerCase().substring(0, 100),\n  celular: celular.substring(0, 20),\n  cpf_ou_cnpj: (state.cpf_ou_cnpj || '').substring(0, 20),\n  classificacao1: `${status}|${tipo}`.substring(0, 30),\n  classificacao2: `Admin: ${admin}`.substring(0, 30),\n  classificacao3: `Urgência: ${urg}`.substring(0, 30),\n  obs: obs.substring(0, 1000),\n  platform: 'BOT_JONAS'\n};\n\nreturn [{\n  json: payload,\n  pairedItem: { item: 0 }\n}];"
      },
      "id": "49af74b4-b79b-4cd6-b076-b044017b4064",
      "name": "5. Preparar Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        272
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.crmapollo.com.br/webhooks/leads/create.php?url=VVL&user=Mw==&pipeline=0&token=01d2967974da735d8d7977ae4a38a25f314d80e7ac661d70fb9823913929c745",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "d3327e76-dad0-4650-bcaa-4221801bd130",
      "name": "6. HTTP → Apollo CRM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        272,
        272
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// NÓ: Tratar Resposta CRM\n// ========================================\n\nconst res = $input.item.json;\nconst status = res.statusCode ?? 0;\nlet body = res.body;\n\n// Parse body se for string\ntry {\n  if (typeof body === 'string') body = JSON.parse(body);\n} catch {}\n\nconst msg = (typeof body === 'string' ? body : JSON.stringify(body)).toLowerCase();\n\n// Classificar resultado\nconst isDuplicate = status === 400 && (msg.includes('duplicado') || msg.includes('duplicate'));\nconst isSuccess = status >= 200 && status < 300;\n\nconst crmStatus = isDuplicate ? 'duplicate' : (isSuccess ? 'created' : 'error');\n\nconsole.log(JSON.stringify({\n  event: 'crm_response',\n  status: crmStatus,\n  httpStatus: status\n}));\n\nreturn [{\n  json: {\n    crmStatus: crmStatus,\n    httpStatus: status,\n    body: body\n  }\n}];"
      },
      "id": "271df2f6-6477-4487-a80d-a2db3ec64d4b",
      "name": "7. Tratar Resposta CRM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        272
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// NÓ: Processar Resposta AI (CORRIGIDO)\n// ========================================\n// CORREÇÃO PRINCIPAL: Parser robusto e validação de duplicação\n\nconst item = $input.item.json;\n\n// Função auxiliar: strip markdown fences\nfunction stripFences(s) {\n  if (typeof s !== 'string') return s;\n  return s.replace(/^\\s*```(?:json)?/i, '').replace(/```+\\s*$/i, '').trim();\n}\n\n// Função auxiliar: remover trailing commas\nfunction fixTrailingCommas(s) {\n  return s.replace(/,\\s*([}\\]])/g, '$1');\n}\n\n// Função auxiliar: extrair JSON do texto\nfunction extractJSON(s) {\n  const match = s.match(/\\{[^]*\\}/);\n  return match ? match[0] : s;\n}\n\n// Tentar parsear de múltiplas fontes\nlet raw = item.parsedOutput ?? item.output ?? item.result ?? item.text ?? item;\nlet ai = null;\n\nif (raw && typeof raw === 'object' && !Array.isArray(raw)) {\n  ai = raw;\n} else if (typeof raw === 'string') {\n  let cleaned = stripFences(raw);\n  cleaned = extractJSON(cleaned);\n  cleaned = fixTrailingCommas(cleaned);\n  \n  try {\n    ai = JSON.parse(cleaned);\n  } catch (e) {\n    console.error('JSON parse failed:', e.message);\n    console.error('Raw string (first 500 chars):', cleaned.substring(0, 500));\n  }\n}\n\n// Fallback se parse falhou\nif (!ai || typeof ai !== 'object') {\n  console.error('PARSER FAILURE - Using fallback response');\n  ai = {\n    reply: '',\n    question: 'Desculpe, tive um problema técnico. Podemos recomeçar?',\n    chips: ['Sim', 'Falar com humano'],\n    conversationState: {},\n    shouldSendToCRM: false,\n    classificacao: 'frio'\n  };\n}\n\n// Validar estrutura\nconst state = ai.conversationState || {};\nconst reply = (ai.reply || '').trim();\nconst question = (ai.question || '').trim();\n\n// VALIDAÇÃO ANTI-DUPLICAÇÃO\nif (reply && question) {\n  const replyLower = reply.toLowerCase();\n  const questionLower = question.toLowerCase();\n  \n  // Se reply termina com a question, remover question\n  if (replyLower.includes(questionLower)) {\n    console.log('DUPLICAÇÃO DETECTADA - Removendo question');\n    ai.question = '';\n  }\n}\n\n// Validar consentimento para CRM\nconst shouldSend = \n  ai.shouldSendToCRM === true &&\n  state.nome?.trim() &&\n  state.email?.includes('@') &&\n  state.celular?.length >= 10 &&\n  state.consent_lgpd === true;\n\n// Log estruturado\nconsole.log(JSON.stringify({\n  event: 'ai_response_processed',\n  hasReply: !!reply,\n  hasQuestion: !!question,\n  shouldSendToCRM: shouldSend,\n  phase: state.phase,\n  classificacao: ai.classificacao\n}));\n\nreturn [{\n  json: {\n    reply: reply,\n    question: question,\n    chips: Array.isArray(ai.chips) ? ai.chips.slice(0, 3) : [],\n    conversationState: state,\n    shouldSendToCRM: shouldSend,\n    classificacao: ai.classificacao || 'morno',\n    source: 'ai_agent'\n  }\n}];"
      },
      "id": "de2882f8-07b7-43af-bd17-4b3d3df666a1",
      "name": "3. Processar AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        400
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// NÓ: Formatar Resposta Final (CORRIGIDO)\n// ========================================\n// CORREÇÃO PRINCIPAL: Não concatenar reply + question\n\nconst inJson = $input.item.json;\n\n// Se veio do CRM (com status)\nif (inJson.crmStatus) {\n  const responses = {\n    created: 'Pronto! Seus dados foram registrados. Um especialista entrará em contato em breve.',\n    duplicate: 'Recebi seu pedido. Já temos seu cadastro aqui — vamos priorizar seu atendimento!',\n    error: 'Tive um problema ao registrar agora. Posso tentar novamente ou encaminhar direto ao especialista?'\n  };\n  \n  const output = responses[inJson.crmStatus] || responses.error;\n  \n  console.log(JSON.stringify({\n    event: 'final_response',\n    type: 'crm_status',\n    crmStatus: inJson.crmStatus\n  }));\n  \n  return [{ json: { output: output } }];\n}\n\n// Se veio do AI Agent\nif (inJson.reply !== undefined || inJson.question !== undefined) {\n  const reply = (inJson.reply || '').trim();\n  const question = (inJson.question || '').trim();\n  \n  // CORREÇÃO: Construir resposta sem duplicação\n  let output = '';\n  \n  if (reply && question) {\n    // Ambos presentes: separar com espaço ou ponto\n    output = reply.endsWith('.') || reply.endsWith('?') || reply.endsWith('!')\n      ? `${reply} ${question}`\n      : `${reply}. ${question}`;\n  } else if (reply) {\n    // Apenas reply\n    output = reply;\n  } else if (question) {\n    // Apenas question\n    output = question;\n  } else {\n    // Fallback\n    output = 'Como posso ajudar?';\n  }\n  \n  console.log(JSON.stringify({\n    event: 'final_response',\n    type: 'ai_conversation',\n    hasReply: !!reply,\n    hasQuestion: !!question,\n    outputLength: output.length\n  }));\n  \n  return [{ json: { output: output } }];\n}\n\n// Fallback geral\nconsole.log(JSON.stringify({\n  event: 'final_response',\n  type: 'fallback'\n}));\n\nreturn [{ json: { output: 'Como posso ajudar?' } }];"
      },
      "id": "4600c846-76e8-4464-b289-3d7fbfbd38c7",
      "name": "8. Formatar Resposta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        416
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "id": "96e89f8d-74e9-48e9-8aed-e1ceec26a2a1",
      "name": "Memory (20msgs)",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -496,
        720
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "1. Extrair Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1. Extrair Input": {
      "main": [
        [
          {
            "node": "2. AI Agent Jonas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. AI Agent Jonas": {
      "main": [
        [
          {
            "node": "3. Processar AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-4o": {
      "ai_languageModel": [
        [
          {
            "node": "2. AI Agent Jonas",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "2. AI Agent Jonas",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "4. Enviar CRM?": {
      "main": [
        [
          {
            "node": "5. Preparar Payload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "8. Formatar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "5. Preparar Payload": {
      "main": [
        [
          {
            "node": "6. HTTP → Apollo CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "6. HTTP → Apollo CRM": {
      "main": [
        [
          {
            "node": "7. Tratar Resposta CRM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "7. Tratar Resposta CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "7. Tratar Resposta CRM": {
      "main": [
        [
          {
            "node": "8. Formatar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Processar AI": {
      "main": [
        [
          {
            "node": "4. Enviar CRM?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory (20msgs)": {
      "ai_memory": [
        [
          {
            "node": "2. AI Agent Jonas",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "98ec089a-67b5-48de-bdb2-76bcd036b1c0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "23d734c7b1d99d9a24de578c6799ef30a42b138c52ec093818369180a71ee966"
  },
  "id": "PYJVi50qaJhBLFEw",
  "tags": []
}